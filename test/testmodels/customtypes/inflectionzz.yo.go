// Code generated by yo. DO NOT EDIT.
// Package customtypes contains the types.
package customtypes

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Inflectionzz represents a row from 'Inflectionzz'.
type Inflectionzz struct {
	X string `spanner:"X" json:"X"` // X
	Y string `spanner:"Y" json:"Y"` // Y
}

func InflectionzzPrimaryKeys() []string {
	return []string{
		"X",
	}
}

func InflectionzzColumns() []string {
	return []string{
		"X",
		"Y",
	}
}

func InflectionzzWritableColumns() []string {
	return []string{
		"X",
		"Y",
	}
}

func (i *Inflectionzz) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "X":
			ret = append(ret, &i.X)
		case "Y":
			ret = append(ret, &i.Y)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (i *Inflectionzz) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "X":
			ret = append(ret, i.X)
		case "Y":
			ret = append(ret, i.Y)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newInflectionzz_Decoder returns a decoder which reads a row from *spanner.Row
// into Inflectionzz. The decoder is not goroutine-safe. Don't use it concurrently.
func newInflectionzz_Decoder(cols []string) func(*spanner.Row) (*Inflectionzz, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Inflectionzz, error) {
		var i Inflectionzz
		ptrs, err := i.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &i, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (i *Inflectionzz) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := i.columnsToValues(InflectionzzWritableColumns())
	return spanner.Insert("Inflectionzz", InflectionzzWritableColumns(), values)
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (i *Inflectionzz) Update(ctx context.Context) *spanner.Mutation {
	values, _ := i.columnsToValues(InflectionzzWritableColumns())
	return spanner.Update("Inflectionzz", InflectionzzWritableColumns(), values)
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (i *Inflectionzz) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	values, _ := i.columnsToValues(InflectionzzWritableColumns())
	return spanner.InsertOrUpdate("Inflectionzz", InflectionzzWritableColumns(), values)
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (i *Inflectionzz) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, InflectionzzPrimaryKeys()...)

	values, err := i.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Inflectionzz.UpdateColumns", "Inflectionzz", err)
	}

	return spanner.Update("Inflectionzz", colsWithPKeys, values), nil
}

// FindInflectionzz gets a Inflectionzz by primary key
func FindInflectionzz(ctx context.Context, db YORODB, x string) (*Inflectionzz, error) {
	key := spanner.Key{x}
	row, err := db.ReadRow(ctx, "Inflectionzz", key, InflectionzzColumns())
	if err != nil {
		return nil, newError("FindInflectionzz", "Inflectionzz", err)
	}

	decoder := newInflectionzz_Decoder(InflectionzzColumns())
	i, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindInflectionzz", "Inflectionzz", err)
	}

	return i, nil
}

// ReadInflectionzz retrieves multiples rows from Inflectionzz by KeySet as a slice.
func ReadInflectionzz(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Inflectionzz, error) {
	var res []*Inflectionzz

	decoder := newInflectionzz_Decoder(InflectionzzColumns())

	rows := db.Read(ctx, "Inflectionzz", keys, InflectionzzColumns())
	err := rows.Do(func(row *spanner.Row) error {
		i, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, i)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadInflectionzz", "Inflectionzz", err)
	}

	return res, nil
}

// Delete deletes the Inflectionzz from the database.
func (i *Inflectionzz) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := i.columnsToValues(InflectionzzPrimaryKeys())
	return spanner.Delete("Inflectionzz", spanner.Key(values))
}
