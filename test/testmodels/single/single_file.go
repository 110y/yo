// Package single contains the types.
package single

// Code generated by yo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/civil"
	"cloud.google.com/go/spanner"
	"google.golang.org/api/iterator"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// CompositePrimaryKey represents a row from 'CompositePrimaryKeys'.
type CompositePrimaryKey struct {
	ID    int64  `spanner:"Id" json:"Id"`       // Id
	PKey1 string `spanner:"PKey1" json:"PKey1"` // PKey1
	PKey2 int64  `spanner:"PKey2" json:"PKey2"` // PKey2
	Error int64  `spanner:"Error" json:"Error"` // Error
	X     string `spanner:"X" json:"X"`         // X
	Y     string `spanner:"Y" json:"Y"`         // Y
	Z     string `spanner:"Z" json:"Z"`         // Z
}

func CompositePrimaryKeyPrimaryKeys() []string {
	return []string{
		"PKey1",
		"PKey2",
	}
}

func CompositePrimaryKeyColumns() []string {
	return []string{
		"Id",
		"PKey1",
		"PKey2",
		"Error",
		"X",
		"Y",
		"Z",
	}
}

func (cpk *CompositePrimaryKey) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "Id":
			ret = append(ret, &cpk.ID)
		case "PKey1":
			ret = append(ret, &cpk.PKey1)
		case "PKey2":
			ret = append(ret, &cpk.PKey2)
		case "Error":
			ret = append(ret, &cpk.Error)
		case "X":
			ret = append(ret, &cpk.X)
		case "Y":
			ret = append(ret, &cpk.Y)
		case "Z":
			ret = append(ret, &cpk.Z)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (cpk *CompositePrimaryKey) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "Id":
			ret = append(ret, cpk.ID)
		case "PKey1":
			ret = append(ret, cpk.PKey1)
		case "PKey2":
			ret = append(ret, cpk.PKey2)
		case "Error":
			ret = append(ret, cpk.Error)
		case "X":
			ret = append(ret, cpk.X)
		case "Y":
			ret = append(ret, cpk.Y)
		case "Z":
			ret = append(ret, cpk.Z)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newCompositePrimaryKey_Decoder returns a decoder which reads a row from *spanner.Row
// into CompositePrimaryKey. The decoder is not goroutine-safe. Don't use it concurrently.
func newCompositePrimaryKey_Decoder(cols []string) func(*spanner.Row) (*CompositePrimaryKey, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*CompositePrimaryKey, error) {
		var cpk CompositePrimaryKey
		ptrs, err := cpk.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &cpk, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (cpk *CompositePrimaryKey) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("CompositePrimaryKeys", CompositePrimaryKeyColumns(), []interface{}{
		cpk.ID, cpk.PKey1, cpk.PKey2, cpk.Error, cpk.X, cpk.Y, cpk.Z,
	})
}

// InsertCompositePrimaryKeyAll returns slice of Mutation to insert rows into a table. If the row already
// exists, the write or transaction fails.
func InsertCompositePrimaryKeyAll(ctx context.Context, rows []*CompositePrimaryKey) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Insert(ctx))
	}
	return muts
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (cpk *CompositePrimaryKey) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("CompositePrimaryKeys", CompositePrimaryKeyColumns(), []interface{}{
		cpk.ID, cpk.PKey1, cpk.PKey2, cpk.Error, cpk.X, cpk.Y, cpk.Z,
	})
}

// UpdateCompositePrimaryKeyAll returns slice of Mutation to update rows in a table. If the row does not
// already exist, the write or transaction fails.
func UpdateCompositePrimaryKeyAll(ctx context.Context, rows []*CompositePrimaryKey) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Update(ctx))
	}
	return muts
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (cpk *CompositePrimaryKey) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("CompositePrimaryKeys", CompositePrimaryKeyColumns(), []interface{}{
		cpk.ID, cpk.PKey1, cpk.PKey2, cpk.Error, cpk.X, cpk.Y, cpk.Z,
	})
}

// InsertOrUpdateCompositePrimaryKeyAll returns slice of Mutation to insert rows into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func InsertOrUpdateCompositePrimaryKeyAll(ctx context.Context, rows []*CompositePrimaryKey) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.InsertOrUpdate(ctx))
	}
	return muts
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (cpk *CompositePrimaryKey) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, CompositePrimaryKeyPrimaryKeys()...)

	values, err := cpk.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "CompositePrimaryKey.UpdateColumns", "CompositePrimaryKeys", err)
	}

	return spanner.Update("CompositePrimaryKeys", colsWithPKeys, values), nil
}

// UpdateCompositePrimaryKeyColumnsAll returns slice of Mutation to update specified columns of rows in a table.
func UpdateCompositePrimaryKeyColumnsAll(ctx context.Context, rows []*CompositePrimaryKey, cols ...string) ([]*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, CompositePrimaryKeyPrimaryKeys()...)

	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		values, err := r.columnsToValues(colsWithPKeys)
		if err != nil {
			return nil, newErrorWithCode(codes.InvalidArgument, "CompositePrimaryKey.UpdateColumns", "CompositePrimaryKeys", err)
		}

		muts = append(muts, spanner.Update("CompositePrimaryKeys", colsWithPKeys, values))
	}

	return muts, nil
}

// FindCompositePrimaryKey gets a CompositePrimaryKey by primary key
func FindCompositePrimaryKey(ctx context.Context, db YORODB, pKey1 string, pKey2 int64) (*CompositePrimaryKey, error) {
	key := spanner.Key{pKey1, pKey2}
	row, err := db.ReadRow(ctx, "CompositePrimaryKeys", key, CompositePrimaryKeyColumns())
	if err != nil {
		return nil, newError("FindCompositePrimaryKey", "CompositePrimaryKeys", err)
	}

	decoder := newCompositePrimaryKey_Decoder(CompositePrimaryKeyColumns())
	cpk, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindCompositePrimaryKey", "CompositePrimaryKeys", err)
	}

	return cpk, nil
}

// Delete deletes the CompositePrimaryKey from the database.
func (cpk *CompositePrimaryKey) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := cpk.columnsToValues(CompositePrimaryKeyPrimaryKeys())
	return spanner.Delete("CompositePrimaryKeys", spanner.Key(values))
}

// DeleteCompositePrimaryKeyAll deletes the CompositePrimaryKey rows from the database.
func DeleteCompositePrimaryKeyAll(ctx context.Context, rows []*CompositePrimaryKey) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Delete(ctx))
	}
	return muts
}

// FullType represents a row from 'FullTypes'.
type FullType struct {
	PKey                 string              `spanner:"PKey" json:"PKey"`                                 // PKey
	FTString             string              `spanner:"FTString" json:"FTString"`                         // FTString
	FTStringNull         spanner.NullString  `spanner:"FTStringNull" json:"FTStringNull"`                 // FTStringNull
	FTBool               bool                `spanner:"FTBool" json:"FTBool"`                             // FTBool
	FTBoolNull           spanner.NullBool    `spanner:"FTBoolNull" json:"FTBoolNull"`                     // FTBoolNull
	FTBytes              []byte              `spanner:"FTBytes" json:"FTBytes"`                           // FTBytes
	FTBytesNull          []byte              `spanner:"FTBytesNull" json:"FTBytesNull"`                   // FTBytesNull
	FTTimestamp          time.Time           `spanner:"FTTimestamp" json:"FTTimestamp"`                   // FTTimestamp
	FTTimestampNull      spanner.NullTime    `spanner:"FTTimestampNull" json:"FTTimestampNull"`           // FTTimestampNull
	FTInt                int64               `spanner:"FTInt" json:"FTInt"`                               // FTInt
	FTIntNull            spanner.NullInt64   `spanner:"FTIntNull" json:"FTIntNull"`                       // FTIntNull
	FTFloat              float64             `spanner:"FTFloat" json:"FTFloat"`                           // FTFloat
	FTFloatNull          spanner.NullFloat64 `spanner:"FTFloatNull" json:"FTFloatNull"`                   // FTFloatNull
	FTDate               civil.Date          `spanner:"FTDate" json:"FTDate"`                             // FTDate
	FTDateNull           spanner.NullDate    `spanner:"FTDateNull" json:"FTDateNull"`                     // FTDateNull
	FTArrayStringNull    []string            `spanner:"FTArrayStringNull" json:"FTArrayStringNull"`       // FTArrayStringNull
	FTArrayString        []string            `spanner:"FTArrayString" json:"FTArrayString"`               // FTArrayString
	FTArrayBoolNull      []bool              `spanner:"FTArrayBoolNull" json:"FTArrayBoolNull"`           // FTArrayBoolNull
	FTArrayBool          []bool              `spanner:"FTArrayBool" json:"FTArrayBool"`                   // FTArrayBool
	FTArrayBytesNull     [][]byte            `spanner:"FTArrayBytesNull" json:"FTArrayBytesNull"`         // FTArrayBytesNull
	FTArrayBytes         [][]byte            `spanner:"FTArrayBytes" json:"FTArrayBytes"`                 // FTArrayBytes
	FTArrayTimestampNull []time.Time         `spanner:"FTArrayTimestampNull" json:"FTArrayTimestampNull"` // FTArrayTimestampNull
	FTArrayTimestamp     []time.Time         `spanner:"FTArrayTimestamp" json:"FTArrayTimestamp"`         // FTArrayTimestamp
	FTArrayIntNull       []int64             `spanner:"FTArrayIntNull" json:"FTArrayIntNull"`             // FTArrayIntNull
	FTArrayInt           []int64             `spanner:"FTArrayInt" json:"FTArrayInt"`                     // FTArrayInt
	FTArrayFloatNull     []float64           `spanner:"FTArrayFloatNull" json:"FTArrayFloatNull"`         // FTArrayFloatNull
	FTArrayFloat         []float64           `spanner:"FTArrayFloat" json:"FTArrayFloat"`                 // FTArrayFloat
	FTArrayDateNull      []civil.Date        `spanner:"FTArrayDateNull" json:"FTArrayDateNull"`           // FTArrayDateNull
	FTArrayDate          []civil.Date        `spanner:"FTArrayDate" json:"FTArrayDate"`                   // FTArrayDate
}

func FullTypePrimaryKeys() []string {
	return []string{
		"PKey",
	}
}

func FullTypeColumns() []string {
	return []string{
		"PKey",
		"FTString",
		"FTStringNull",
		"FTBool",
		"FTBoolNull",
		"FTBytes",
		"FTBytesNull",
		"FTTimestamp",
		"FTTimestampNull",
		"FTInt",
		"FTIntNull",
		"FTFloat",
		"FTFloatNull",
		"FTDate",
		"FTDateNull",
		"FTArrayStringNull",
		"FTArrayString",
		"FTArrayBoolNull",
		"FTArrayBool",
		"FTArrayBytesNull",
		"FTArrayBytes",
		"FTArrayTimestampNull",
		"FTArrayTimestamp",
		"FTArrayIntNull",
		"FTArrayInt",
		"FTArrayFloatNull",
		"FTArrayFloat",
		"FTArrayDateNull",
		"FTArrayDate",
	}
}

func (ft *FullType) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "PKey":
			ret = append(ret, &ft.PKey)
		case "FTString":
			ret = append(ret, &ft.FTString)
		case "FTStringNull":
			ret = append(ret, &ft.FTStringNull)
		case "FTBool":
			ret = append(ret, &ft.FTBool)
		case "FTBoolNull":
			ret = append(ret, &ft.FTBoolNull)
		case "FTBytes":
			ret = append(ret, &ft.FTBytes)
		case "FTBytesNull":
			ret = append(ret, &ft.FTBytesNull)
		case "FTTimestamp":
			ret = append(ret, &ft.FTTimestamp)
		case "FTTimestampNull":
			ret = append(ret, &ft.FTTimestampNull)
		case "FTInt":
			ret = append(ret, &ft.FTInt)
		case "FTIntNull":
			ret = append(ret, &ft.FTIntNull)
		case "FTFloat":
			ret = append(ret, &ft.FTFloat)
		case "FTFloatNull":
			ret = append(ret, &ft.FTFloatNull)
		case "FTDate":
			ret = append(ret, &ft.FTDate)
		case "FTDateNull":
			ret = append(ret, &ft.FTDateNull)
		case "FTArrayStringNull":
			ret = append(ret, &ft.FTArrayStringNull)
		case "FTArrayString":
			ret = append(ret, &ft.FTArrayString)
		case "FTArrayBoolNull":
			ret = append(ret, &ft.FTArrayBoolNull)
		case "FTArrayBool":
			ret = append(ret, &ft.FTArrayBool)
		case "FTArrayBytesNull":
			ret = append(ret, &ft.FTArrayBytesNull)
		case "FTArrayBytes":
			ret = append(ret, &ft.FTArrayBytes)
		case "FTArrayTimestampNull":
			ret = append(ret, &ft.FTArrayTimestampNull)
		case "FTArrayTimestamp":
			ret = append(ret, &ft.FTArrayTimestamp)
		case "FTArrayIntNull":
			ret = append(ret, &ft.FTArrayIntNull)
		case "FTArrayInt":
			ret = append(ret, &ft.FTArrayInt)
		case "FTArrayFloatNull":
			ret = append(ret, &ft.FTArrayFloatNull)
		case "FTArrayFloat":
			ret = append(ret, &ft.FTArrayFloat)
		case "FTArrayDateNull":
			ret = append(ret, &ft.FTArrayDateNull)
		case "FTArrayDate":
			ret = append(ret, &ft.FTArrayDate)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (ft *FullType) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "PKey":
			ret = append(ret, ft.PKey)
		case "FTString":
			ret = append(ret, ft.FTString)
		case "FTStringNull":
			ret = append(ret, ft.FTStringNull)
		case "FTBool":
			ret = append(ret, ft.FTBool)
		case "FTBoolNull":
			ret = append(ret, ft.FTBoolNull)
		case "FTBytes":
			ret = append(ret, ft.FTBytes)
		case "FTBytesNull":
			ret = append(ret, ft.FTBytesNull)
		case "FTTimestamp":
			ret = append(ret, ft.FTTimestamp)
		case "FTTimestampNull":
			ret = append(ret, ft.FTTimestampNull)
		case "FTInt":
			ret = append(ret, ft.FTInt)
		case "FTIntNull":
			ret = append(ret, ft.FTIntNull)
		case "FTFloat":
			ret = append(ret, ft.FTFloat)
		case "FTFloatNull":
			ret = append(ret, ft.FTFloatNull)
		case "FTDate":
			ret = append(ret, ft.FTDate)
		case "FTDateNull":
			ret = append(ret, ft.FTDateNull)
		case "FTArrayStringNull":
			ret = append(ret, ft.FTArrayStringNull)
		case "FTArrayString":
			ret = append(ret, ft.FTArrayString)
		case "FTArrayBoolNull":
			ret = append(ret, ft.FTArrayBoolNull)
		case "FTArrayBool":
			ret = append(ret, ft.FTArrayBool)
		case "FTArrayBytesNull":
			ret = append(ret, ft.FTArrayBytesNull)
		case "FTArrayBytes":
			ret = append(ret, ft.FTArrayBytes)
		case "FTArrayTimestampNull":
			ret = append(ret, ft.FTArrayTimestampNull)
		case "FTArrayTimestamp":
			ret = append(ret, ft.FTArrayTimestamp)
		case "FTArrayIntNull":
			ret = append(ret, ft.FTArrayIntNull)
		case "FTArrayInt":
			ret = append(ret, ft.FTArrayInt)
		case "FTArrayFloatNull":
			ret = append(ret, ft.FTArrayFloatNull)
		case "FTArrayFloat":
			ret = append(ret, ft.FTArrayFloat)
		case "FTArrayDateNull":
			ret = append(ret, ft.FTArrayDateNull)
		case "FTArrayDate":
			ret = append(ret, ft.FTArrayDate)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newFullType_Decoder returns a decoder which reads a row from *spanner.Row
// into FullType. The decoder is not goroutine-safe. Don't use it concurrently.
func newFullType_Decoder(cols []string) func(*spanner.Row) (*FullType, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*FullType, error) {
		var ft FullType
		ptrs, err := ft.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &ft, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (ft *FullType) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("FullTypes", FullTypeColumns(), []interface{}{
		ft.PKey, ft.FTString, ft.FTStringNull, ft.FTBool, ft.FTBoolNull, ft.FTBytes, ft.FTBytesNull, ft.FTTimestamp, ft.FTTimestampNull, ft.FTInt, ft.FTIntNull, ft.FTFloat, ft.FTFloatNull, ft.FTDate, ft.FTDateNull, ft.FTArrayStringNull, ft.FTArrayString, ft.FTArrayBoolNull, ft.FTArrayBool, ft.FTArrayBytesNull, ft.FTArrayBytes, ft.FTArrayTimestampNull, ft.FTArrayTimestamp, ft.FTArrayIntNull, ft.FTArrayInt, ft.FTArrayFloatNull, ft.FTArrayFloat, ft.FTArrayDateNull, ft.FTArrayDate,
	})
}

// InsertFullTypeAll returns slice of Mutation to insert rows into a table. If the row already
// exists, the write or transaction fails.
func InsertFullTypeAll(ctx context.Context, rows []*FullType) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Insert(ctx))
	}
	return muts
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (ft *FullType) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("FullTypes", FullTypeColumns(), []interface{}{
		ft.PKey, ft.FTString, ft.FTStringNull, ft.FTBool, ft.FTBoolNull, ft.FTBytes, ft.FTBytesNull, ft.FTTimestamp, ft.FTTimestampNull, ft.FTInt, ft.FTIntNull, ft.FTFloat, ft.FTFloatNull, ft.FTDate, ft.FTDateNull, ft.FTArrayStringNull, ft.FTArrayString, ft.FTArrayBoolNull, ft.FTArrayBool, ft.FTArrayBytesNull, ft.FTArrayBytes, ft.FTArrayTimestampNull, ft.FTArrayTimestamp, ft.FTArrayIntNull, ft.FTArrayInt, ft.FTArrayFloatNull, ft.FTArrayFloat, ft.FTArrayDateNull, ft.FTArrayDate,
	})
}

// UpdateFullTypeAll returns slice of Mutation to update rows in a table. If the row does not
// already exist, the write or transaction fails.
func UpdateFullTypeAll(ctx context.Context, rows []*FullType) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Update(ctx))
	}
	return muts
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (ft *FullType) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("FullTypes", FullTypeColumns(), []interface{}{
		ft.PKey, ft.FTString, ft.FTStringNull, ft.FTBool, ft.FTBoolNull, ft.FTBytes, ft.FTBytesNull, ft.FTTimestamp, ft.FTTimestampNull, ft.FTInt, ft.FTIntNull, ft.FTFloat, ft.FTFloatNull, ft.FTDate, ft.FTDateNull, ft.FTArrayStringNull, ft.FTArrayString, ft.FTArrayBoolNull, ft.FTArrayBool, ft.FTArrayBytesNull, ft.FTArrayBytes, ft.FTArrayTimestampNull, ft.FTArrayTimestamp, ft.FTArrayIntNull, ft.FTArrayInt, ft.FTArrayFloatNull, ft.FTArrayFloat, ft.FTArrayDateNull, ft.FTArrayDate,
	})
}

// InsertOrUpdateFullTypeAll returns slice of Mutation to insert rows into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func InsertOrUpdateFullTypeAll(ctx context.Context, rows []*FullType) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.InsertOrUpdate(ctx))
	}
	return muts
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (ft *FullType) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, FullTypePrimaryKeys()...)

	values, err := ft.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "FullType.UpdateColumns", "FullTypes", err)
	}

	return spanner.Update("FullTypes", colsWithPKeys, values), nil
}

// UpdateFullTypeColumnsAll returns slice of Mutation to update specified columns of rows in a table.
func UpdateFullTypeColumnsAll(ctx context.Context, rows []*FullType, cols ...string) ([]*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, FullTypePrimaryKeys()...)

	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		values, err := r.columnsToValues(colsWithPKeys)
		if err != nil {
			return nil, newErrorWithCode(codes.InvalidArgument, "FullType.UpdateColumns", "FullTypes", err)
		}

		muts = append(muts, spanner.Update("FullTypes", colsWithPKeys, values))
	}

	return muts, nil
}

// FindFullType gets a FullType by primary key
func FindFullType(ctx context.Context, db YORODB, pKey string) (*FullType, error) {
	key := spanner.Key{pKey}
	row, err := db.ReadRow(ctx, "FullTypes", key, FullTypeColumns())
	if err != nil {
		return nil, newError("FindFullType", "FullTypes", err)
	}

	decoder := newFullType_Decoder(FullTypeColumns())
	ft, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindFullType", "FullTypes", err)
	}

	return ft, nil
}

// Delete deletes the FullType from the database.
func (ft *FullType) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := ft.columnsToValues(FullTypePrimaryKeys())
	return spanner.Delete("FullTypes", spanner.Key(values))
}

// DeleteFullTypeAll deletes the FullType rows from the database.
func DeleteFullTypeAll(ctx context.Context, rows []*FullType) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Delete(ctx))
	}
	return muts
}

// MaxLength represents a row from 'MaxLengths'.
type MaxLength struct {
	MaxString string `spanner:"MaxString" json:"MaxString"` // MaxString
	MaxBytes  []byte `spanner:"MaxBytes" json:"MaxBytes"`   // MaxBytes
}

func MaxLengthPrimaryKeys() []string {
	return []string{
		"MaxString",
	}
}

func MaxLengthColumns() []string {
	return []string{
		"MaxString",
		"MaxBytes",
	}
}

func (ml *MaxLength) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "MaxString":
			ret = append(ret, &ml.MaxString)
		case "MaxBytes":
			ret = append(ret, &ml.MaxBytes)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (ml *MaxLength) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "MaxString":
			ret = append(ret, ml.MaxString)
		case "MaxBytes":
			ret = append(ret, ml.MaxBytes)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newMaxLength_Decoder returns a decoder which reads a row from *spanner.Row
// into MaxLength. The decoder is not goroutine-safe. Don't use it concurrently.
func newMaxLength_Decoder(cols []string) func(*spanner.Row) (*MaxLength, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*MaxLength, error) {
		var ml MaxLength
		ptrs, err := ml.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &ml, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (ml *MaxLength) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("MaxLengths", MaxLengthColumns(), []interface{}{
		ml.MaxString, ml.MaxBytes,
	})
}

// InsertMaxLengthAll returns slice of Mutation to insert rows into a table. If the row already
// exists, the write or transaction fails.
func InsertMaxLengthAll(ctx context.Context, rows []*MaxLength) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Insert(ctx))
	}
	return muts
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (ml *MaxLength) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("MaxLengths", MaxLengthColumns(), []interface{}{
		ml.MaxString, ml.MaxBytes,
	})
}

// UpdateMaxLengthAll returns slice of Mutation to update rows in a table. If the row does not
// already exist, the write or transaction fails.
func UpdateMaxLengthAll(ctx context.Context, rows []*MaxLength) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Update(ctx))
	}
	return muts
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (ml *MaxLength) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("MaxLengths", MaxLengthColumns(), []interface{}{
		ml.MaxString, ml.MaxBytes,
	})
}

// InsertOrUpdateMaxLengthAll returns slice of Mutation to insert rows into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func InsertOrUpdateMaxLengthAll(ctx context.Context, rows []*MaxLength) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.InsertOrUpdate(ctx))
	}
	return muts
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (ml *MaxLength) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, MaxLengthPrimaryKeys()...)

	values, err := ml.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "MaxLength.UpdateColumns", "MaxLengths", err)
	}

	return spanner.Update("MaxLengths", colsWithPKeys, values), nil
}

// UpdateMaxLengthColumnsAll returns slice of Mutation to update specified columns of rows in a table.
func UpdateMaxLengthColumnsAll(ctx context.Context, rows []*MaxLength, cols ...string) ([]*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, MaxLengthPrimaryKeys()...)

	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		values, err := r.columnsToValues(colsWithPKeys)
		if err != nil {
			return nil, newErrorWithCode(codes.InvalidArgument, "MaxLength.UpdateColumns", "MaxLengths", err)
		}

		muts = append(muts, spanner.Update("MaxLengths", colsWithPKeys, values))
	}

	return muts, nil
}

// FindMaxLength gets a MaxLength by primary key
func FindMaxLength(ctx context.Context, db YORODB, maxString string) (*MaxLength, error) {
	key := spanner.Key{maxString}
	row, err := db.ReadRow(ctx, "MaxLengths", key, MaxLengthColumns())
	if err != nil {
		return nil, newError("FindMaxLength", "MaxLengths", err)
	}

	decoder := newMaxLength_Decoder(MaxLengthColumns())
	ml, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindMaxLength", "MaxLengths", err)
	}

	return ml, nil
}

// Delete deletes the MaxLength from the database.
func (ml *MaxLength) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := ml.columnsToValues(MaxLengthPrimaryKeys())
	return spanner.Delete("MaxLengths", spanner.Key(values))
}

// DeleteMaxLengthAll deletes the MaxLength rows from the database.
func DeleteMaxLengthAll(ctx context.Context, rows []*MaxLength) []*spanner.Mutation {
	muts := make([]*spanner.Mutation, 0, len(rows))
	for _, r := range rows {
		muts = append(muts, r.Delete(ctx))
	}
	return muts
}

// FindCompositePrimaryKeysByError retrieves multiple rows from 'CompositePrimaryKeys' as a slice of CompositePrimaryKey.
//
// Generated from index 'CompositePrimaryKeysByError'.
func FindCompositePrimaryKeysByError(ctx context.Context, db YORODB, e int64) ([]*CompositePrimaryKey, error) {
	const sqlstr = `SELECT ` +
		`Id, PKey1, PKey2, Error, X, Y, Z ` +
		`FROM CompositePrimaryKeys@{FORCE_INDEX=CompositePrimaryKeysByError} ` +
		`WHERE Error = @param0`

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = e

	decoder := newCompositePrimaryKey_Decoder(CompositePrimaryKeyColumns())

	// run query
	YOLog(ctx, sqlstr, e)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	// load results
	res := []*CompositePrimaryKey{}
	for {
		row, err := iter.Next()
		if err != nil {
			if err == iterator.Done {
				break
			}
			return nil, newError("FindCompositePrimaryKeysByError", "CompositePrimaryKeys", err)
		}

		cpk, err := decoder(row)
		if err != nil {
			return nil, newErrorWithCode(codes.Internal, "FindCompositePrimaryKeysByError", "CompositePrimaryKeys", err)
		}

		res = append(res, cpk)
	}

	return res, nil
}

// FindCompositePrimaryKeysByXY retrieves multiple rows from 'CompositePrimaryKeys' as a slice of CompositePrimaryKey.
//
// Generated from index 'CompositePrimaryKeysByXY'.
func FindCompositePrimaryKeysByXY(ctx context.Context, db YORODB, x string, y string) ([]*CompositePrimaryKey, error) {
	const sqlstr = `SELECT ` +
		`Id, PKey1, PKey2, Error, X, Y, Z ` +
		`FROM CompositePrimaryKeys@{FORCE_INDEX=CompositePrimaryKeysByXY} ` +
		`WHERE X = @param0 AND Y = @param1`

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = x
	stmt.Params["param1"] = y

	decoder := newCompositePrimaryKey_Decoder(CompositePrimaryKeyColumns())

	// run query
	YOLog(ctx, sqlstr, x, y)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	// load results
	res := []*CompositePrimaryKey{}
	for {
		row, err := iter.Next()
		if err != nil {
			if err == iterator.Done {
				break
			}
			return nil, newError("FindCompositePrimaryKeysByXY", "CompositePrimaryKeys", err)
		}

		cpk, err := decoder(row)
		if err != nil {
			return nil, newErrorWithCode(codes.Internal, "FindCompositePrimaryKeysByXY", "CompositePrimaryKeys", err)
		}

		res = append(res, cpk)
	}

	return res, nil
}

// FindFullTypeByFTString retrieves a row from 'FullTypes' as a FullType.
//
// If no row is present with the given key, then ReadRow returns an error where
// spanner.ErrCode(err) is codes.NotFound.
//
// Generated from unique index 'FullTypesByFTString'.
func FindFullTypeByFTString(ctx context.Context, db YORODB, fTString string) (*FullType, error) {
	const sqlstr = `SELECT ` +
		`PKey, FTString, FTStringNull, FTBool, FTBoolNull, FTBytes, FTBytesNull, FTTimestamp, FTTimestampNull, FTInt, FTIntNull, FTFloat, FTFloatNull, FTDate, FTDateNull, FTArrayStringNull, FTArrayString, FTArrayBoolNull, FTArrayBool, FTArrayBytesNull, FTArrayBytes, FTArrayTimestampNull, FTArrayTimestamp, FTArrayIntNull, FTArrayInt, FTArrayFloatNull, FTArrayFloat, FTArrayDateNull, FTArrayDate ` +
		`FROM FullTypes@{FORCE_INDEX=FullTypesByFTString} ` +
		`WHERE FTString = @param0`

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = fTString

	decoder := newFullType_Decoder(FullTypeColumns())

	// run query
	YOLog(ctx, sqlstr, fTString)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	row, err := iter.Next()
	if err != nil {
		if err == iterator.Done {
			return nil, newErrorWithCode(codes.NotFound, "FindFullTypeByFTString", "FullTypes", err)
		}
		return nil, newError("FindFullTypeByFTString", "FullTypes", err)
	}

	ft, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindFullTypeByFTString", "FullTypes", err)
	}

	return ft, nil
}

// FindFullTypeByFTIntFTDate retrieves a row from 'FullTypes' as a FullType.
//
// If no row is present with the given key, then ReadRow returns an error where
// spanner.ErrCode(err) is codes.NotFound.
//
// Generated from unique index 'FullTypesByIntDate'.
func FindFullTypeByFTIntFTDate(ctx context.Context, db YORODB, fTInt int64, fTDate civil.Date) (*FullType, error) {
	const sqlstr = `SELECT ` +
		`PKey, FTString, FTStringNull, FTBool, FTBoolNull, FTBytes, FTBytesNull, FTTimestamp, FTTimestampNull, FTInt, FTIntNull, FTFloat, FTFloatNull, FTDate, FTDateNull, FTArrayStringNull, FTArrayString, FTArrayBoolNull, FTArrayBool, FTArrayBytesNull, FTArrayBytes, FTArrayTimestampNull, FTArrayTimestamp, FTArrayIntNull, FTArrayInt, FTArrayFloatNull, FTArrayFloat, FTArrayDateNull, FTArrayDate ` +
		`FROM FullTypes@{FORCE_INDEX=FullTypesByIntDate} ` +
		`WHERE FTInt = @param0 AND FTDate = @param1`

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = fTInt
	stmt.Params["param1"] = fTDate

	decoder := newFullType_Decoder(FullTypeColumns())

	// run query
	YOLog(ctx, sqlstr, fTInt, fTDate)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	row, err := iter.Next()
	if err != nil {
		if err == iterator.Done {
			return nil, newErrorWithCode(codes.NotFound, "FindFullTypeByFTIntFTDate", "FullTypes", err)
		}
		return nil, newError("FindFullTypeByFTIntFTDate", "FullTypes", err)
	}

	ft, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindFullTypeByFTIntFTDate", "FullTypes", err)
	}

	return ft, nil
}

// FindFullTypesByFTIntFTTimestamp retrieves multiple rows from 'FullTypes' as a slice of FullType.
//
// Generated from index 'FullTypesByIntTimestamp'.
func FindFullTypesByFTIntFTTimestamp(ctx context.Context, db YORODB, fTInt int64, fTTimestamp time.Time) ([]*FullType, error) {
	const sqlstr = `SELECT ` +
		`PKey, FTString, FTStringNull, FTBool, FTBoolNull, FTBytes, FTBytesNull, FTTimestamp, FTTimestampNull, FTInt, FTIntNull, FTFloat, FTFloatNull, FTDate, FTDateNull, FTArrayStringNull, FTArrayString, FTArrayBoolNull, FTArrayBool, FTArrayBytesNull, FTArrayBytes, FTArrayTimestampNull, FTArrayTimestamp, FTArrayIntNull, FTArrayInt, FTArrayFloatNull, FTArrayFloat, FTArrayDateNull, FTArrayDate ` +
		`FROM FullTypes@{FORCE_INDEX=FullTypesByIntTimestamp} ` +
		`WHERE FTInt = @param0 AND FTTimestamp = @param1`

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = fTInt
	stmt.Params["param1"] = fTTimestamp

	decoder := newFullType_Decoder(FullTypeColumns())

	// run query
	YOLog(ctx, sqlstr, fTInt, fTTimestamp)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	// load results
	res := []*FullType{}
	for {
		row, err := iter.Next()
		if err != nil {
			if err == iterator.Done {
				break
			}
			return nil, newError("FindFullTypesByFTIntFTTimestamp", "FullTypes", err)
		}

		ft, err := decoder(row)
		if err != nil {
			return nil, newErrorWithCode(codes.Internal, "FindFullTypesByFTIntFTTimestamp", "FullTypes", err)
		}

		res = append(res, ft)
	}

	return res, nil
}

// FindFullTypesByFTTimestamp retrieves multiple rows from 'FullTypes' as a slice of FullType.
//
// Generated from index 'FullTypesByTimestamp'.
func FindFullTypesByFTTimestamp(ctx context.Context, db YORODB, fTTimestamp time.Time) ([]*FullType, error) {
	const sqlstr = `SELECT ` +
		`PKey, FTString, FTStringNull, FTBool, FTBoolNull, FTBytes, FTBytesNull, FTTimestamp, FTTimestampNull, FTInt, FTIntNull, FTFloat, FTFloatNull, FTDate, FTDateNull, FTArrayStringNull, FTArrayString, FTArrayBoolNull, FTArrayBool, FTArrayBytesNull, FTArrayBytes, FTArrayTimestampNull, FTArrayTimestamp, FTArrayIntNull, FTArrayInt, FTArrayFloatNull, FTArrayFloat, FTArrayDateNull, FTArrayDate ` +
		`FROM FullTypes@{FORCE_INDEX=FullTypesByTimestamp} ` +
		`WHERE FTTimestamp = @param0`

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = fTTimestamp

	decoder := newFullType_Decoder(FullTypeColumns())

	// run query
	YOLog(ctx, sqlstr, fTTimestamp)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	// load results
	res := []*FullType{}
	for {
		row, err := iter.Next()
		if err != nil {
			if err == iterator.Done {
				break
			}
			return nil, newError("FindFullTypesByFTTimestamp", "FullTypes", err)
		}

		ft, err := decoder(row)
		if err != nil {
			return nil, newErrorWithCode(codes.Internal, "FindFullTypesByFTTimestamp", "FullTypes", err)
		}

		res = append(res, ft)
	}

	return res, nil
}

// YODB is the common interface for database operations.
type YODB interface {
	YORODB
}

// YORODB is the common interface for database operations.
type YORODB interface {
	ReadRow(ctx context.Context, table string, key spanner.Key, columns []string) (*spanner.Row, error)
	Read(ctx context.Context, table string, keys spanner.KeySet, columns []string) *spanner.RowIterator
	ReadUsingIndex(ctx context.Context, table, index string, keys spanner.KeySet, columns []string) (ri *spanner.RowIterator)
	Query(ctx context.Context, statement spanner.Statement) *spanner.RowIterator
}

// YOLog provides the log func used by generated queries.
var YOLog = func(context.Context, string, ...interface{}) {}

func newError(method, table string, err error) error {
	code := spanner.ErrCode(err)
	return newErrorWithCode(code, method, table, err)
}

func newErrorWithCode(code codes.Code, method, table string, err error) error {
	return &yoError{
		method: method,
		table:  table,
		err:    err,
		code:   code,
	}
}

type yoError struct {
	err    error
	method string
	table  string
	code   codes.Code
}

func (e yoError) Error() string {
	return fmt.Sprintf("yo error in %s(%s): %v", e.method, e.table, e.err)
}

func (e yoError) DBTableName() string {
	return e.table
}

func (e yoError) GRPCStatus() *status.Status {
	return status.New(e.code, e.Error())
}

func (e yoError) Timeout() bool   { return e.code == codes.DeadlineExceeded }
func (e yoError) Temporary() bool { return e.code == codes.DeadlineExceeded }
func (e yoError) NotFound() bool  { return e.code == codes.NotFound }
